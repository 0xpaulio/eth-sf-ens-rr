import './App.css';

import {useState} from "react";

import {ethers} from "ethers";
import {CONTRACT_ABI, L1_REGISTRY_CONTRACT_ADDRESS, L2_REGISTRY_CONTRACT_ADDRESS} from "./contract";

function App() {
    const [connectedAccount, setConnectedAccount] = useState("");
    const [newResAddr, setNewResAddr] = useState("");

    const nullModal = {open: false, functionSelectorName: "", response: ""}
    const [modal, setModal] = useState(nullModal);
    const [loading, setLoading] = useState("");

    const ensName = "paulio.eth";
    const txOptions = {ccipReadEnabled: true};

    const connectWallet = async () => {
        try {
            const {ethereum} = window;

            if (!ethereum) {
                alert("No wallet connect found")
                return
            }

            const accounts = await ethereum.request({method: "eth_requestAccounts"});
            setConnectedAccount(accounts[0]);
        } catch (err) {
            handleError(err)
        }
    }

    const createRegistryContract = async (ethereum) => {
        const provider = new ethers.providers.Web3Provider(ethereum)
        const signer = provider.getSigner();
        const network = await provider.send("eth_chainId");

        let addr = ""
        if (network == "0x5") addr = L1_REGISTRY_CONTRACT_ADDRESS
        if (network == "0x1a4") addr = L2_REGISTRY_CONTRACT_ADDRESS
        return new ethers.Contract(
            addr,
            CONTRACT_ABI,
            signer
        );
    }

    const switchChain = async (ethereum, network) => {
        await ethereum.request({
            method: 'wallet_switchEthereumChain',
            params: [{chainId: network}],
        });
    }

    const switchToOtherChain = async (nop) => {
        const {ethereum} = window;

        if (ethereum) {
            console.log("switching chain")
            const provider = new ethers.providers.Web3Provider(ethereum)
            const curNetwork = await provider.send("eth_chainId");

            console.log("chain", curNetwork)
            let newChain = ""
            if (curNetwork == "0x5") newChain = "0x1a4"
            if (curNetwork == "0x1a4") newChain = "0x5"
            await ethereum.request({
                method: 'wallet_switchEthereumChain',
                params: [{chainId: newChain}],
            });
        }
    }

    const getOwner = async (ensName) => {
        try {
            const {ethereum} = window;

            if (ethereum) {
                setLoading("Owner")

                // Initialize the registry contract connection
                const registry = await createRegistryContract(ethereum);

                // Generate the nameHash for the corresponding ENS name
                const node = ethers.utils.namehash(ensName);

                // Query the L1 Registry contract & let ethers handle the CCIP reversion
                const owner = await registry.owner(node, txOptions)
                // const owner = await registry.ownerWithProof("", node)
                setModal(
                    {
                        open: true,
                        functionSelectorName: "Owner()",
                        response: owner
                    }
                )
                setLoading("")
                return owner
            }
        } catch (err) {
            handleError(err)
        }
    }

    const getResolver = async () => {
        try {
            const {ethereum} = window;

            if (ethereum) {
                setLoading("Resolver")

                // Initialize the registry contract connection
                const registry = await createRegistryContract(ethereum);

                // Generate the nameHash for the corresponding ENS name
                const node = ethers.utils.namehash(ensName);

                // Query the L1 Registry contract & let ethers handle the CCIP reversion
                const resolver = await registry.resolver(node, txOptions)
                setModal(
                    {
                        open: true,
                        functionSelectorName: "Resolver()",
                        response: resolver
                    }
                )
                setLoading("")
                return resolver
            }
        } catch (err) {
            handleError(err)
        }
    }

    const getTTL = async () => {
        try {
            const {ethereum} = window;

            if (ethereum) {
                setLoading("TTL")

                // Initialize the registry contract connection
                const registry = await createRegistryContract(ethereum);

                // Generate the nameHash for the corresponding ENS name
                const node = ethers.utils.namehash(ensName);

                // Query the L1 Registry contract & let ethers handle the CCIP reversion
                const ttl = await registry.ttl(node, txOptions)
                setModal(
                    {
                        open: true,
                        functionSelectorName: "TTL()",
                        response: ttl
                    }
                )
                setLoading("")
                return ttl
            }
        } catch (err) {
            handleError(err)
        }
    }

    const setResolver = async (newResolverAddr) => {
        try {
            const {ethereum} = window;

            if (ethereum) {
                setLoading("SetResolver")

                // Initialize the registry contract connection
                let registry = await createRegistryContract(ethereum);

                // Generate the nameHash for the corresponding ENS name
                const node = ethers.utils.namehash(ensName);

                try {
                    // Query the L1 Registry contract & catch the CCWP
                    const tx = await registry.setResolver(node, newResolverAddr)
                    const resp = tx.wait()

                    console.log(resp)
                    return
                    // Note: Not going to get here
                } catch (e) {
                    console.log(e)
                }

                console.log("L1 Write deferred to L2")
                await switchChain(ethereum, "0x1a4")

                registry = await createRegistryContract(ethereum);

                // Query the L1 Registry contract & catch the CCWP
                await registry.setResolver(node, newResolverAddr)
                setModal(
                    {
                        open: true,
                        functionSelectorName: "Updated Resolver",
                        response: newResolverAddr
                    }
                )
                setLoading("")

            }
        } catch (err) {
            handleError(err)
        }
    }

    const handleError = (err) => {
        console.log("Handling error")
        console.log(err);
        console.log("opening modal")
        setModal(
            {
                open: true,
                functionSelectorName: "<Error/>",
                response: `${err}`
            }
        )
        setLoading("")
    }

    const loadingButton = (name, handler) => {
        if (loading === name) {
            return (
                <div className="button">
                    <div className="spin"/>
                </div>
            )
        }
        return (
            <div
                className="button"
                onClick={() => handler(ensName)}
            >
                Get {name}
            </div>
        )
    }

    return (
        <div className="App">
            {
                modal.open &&
                <div className="modal-box">
                    <div className="modal-container">
                        <h1>{modal.functionSelectorName}</h1>
                        <div className="left-align">
                            <h2 className="row">ENS Name: <p className="data">{ensName}</p></h2>
                            <h2 className="row">Response: <p className="data">{modal.response}</p></h2>
                        </div>
                        <div
                            className="button center"
                            onClick={() => setModal(nullModal)}
                        >
                            Close Modal
                        </div>
                    </div>
                </div>
            }

            {/* Header */}
            <div className="Header">
                <h1>Trustless L2 ENS Registry Rollup Solution</h1>

                {
                    connectedAccount === "" ?
                        <div
                            className="button connect-wallet"
                            onClick={connectWallet}
                        >
                            Connect Wallet
                        </div>
                        :
                        <div
                            className="button connect-wallet disabled"
                        >
                            {`${connectedAccount.substr(0, 6)}...${connectedAccount.substr(connectedAccount.length - 4)}`}
                        </div>
                }
            </div>

            {/* Body */}
            <div className="Body">
                <h2>Cross Chain Accessor Functions:</h2>
                {loadingButton("Switch Chain", switchToOtherChain)}
                {loadingButton("Owner", getOwner)}
                {loadingButton("Resolver", getResolver)}
                {loadingButton("TTL", getTTL)}

                <div>

                    <input
                        value={newResAddr}
                        onChange={(e) => setNewResAddr(e.target.value)}
                    />

                    {
                        loading === "SetResolver" ?
                            <div className="button">
                                <div className="spin"/>
                            </div>
                            :
                            <div
                                className="button"
                                onClick={() => setResolver(newResAddr)}
                            >
                                Get "SetResolver"
                            </div>
                    }
                </div>
            </div>

            {/* Footer */}
            <div className="Footer">
                <h1>Made with ❤</h1>
            </div>
        </div>
    );
}

export default App;
